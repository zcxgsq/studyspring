<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
		http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		">

        <!--&lt;!&ndash;加载数据库配置文件&ndash;&gt;-->
        <!--<context:property-placeholder ignore-unresolvable="true" location="classpath:db.properties"/>-->
    <!--&lt;!&ndash; 加载应用属性实例，可通过  @Value("#{APP_PROP['jdbc.driver']}") String jdbcDriver 方式引用 &ndash;&gt;-->
    <!--<util:properties id="APP_PROP" location="classpath:db.properties" local-override="true"/>-->

    <!--&lt;!&ndash; 数据源配置, 使用 BoneCP 数据库连接池 &ndash;&gt;-->
    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
        <!--&lt;!&ndash; 数据源驱动类可不写，Druid默认会自动根据URL识别DriverClass &ndash;&gt;-->
        <!--<property name="driverClassName" value="${jdbc.driver}" />-->
        <!--&lt;!&ndash; 基本属性 url、user、password &ndash;&gt;-->
        <!--<property name="url" value="${jdbc.url}" />-->
        <!--<property name="username" value="${jdbc.username}" />-->
        <!--<property name="password" value="${jdbc.password}" />-->
        <!--&lt;!&ndash; 配置初始化大小、最小、最大 &ndash;&gt;-->
        <!--<property name="initialSize" value="${jdbc.pool.init}" />-->
        <!--<property name="minIdle" value="${jdbc.pool.minIdle}" />-->
        <!--<property name="maxActive" value="${jdbc.pool.maxActive}" />-->
        <!--&lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
        <!--<property name="maxWait" value="60000" />-->

        <!--&lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
        <!--<property name="timeBetweenEvictionRunsMillis" value="60000" />-->
        <!--&lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
        <!--<property name="minEvictableIdleTimeMillis" value="300000" />-->
        <!--<property name="validationQuery" value="${jdbc.testSql}" />-->
        <!--<property name="testWhileIdle" value="true" />-->
        <!--<property name="testOnBorrow" value="false" />-->
        <!--<property name="testOnReturn" value="false" />-->
        <!--&lt;!&ndash; 配置监控统计拦截的filters &ndash;&gt;-->
        <!--<property name="filters" value="stat" />-->
    <!--</bean>-->

        <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
            <!--&lt;!&ndash; 指定扫描的包名-->
            <!--如果扫描多个包，每个包中间使用半角逗号分隔-->
            <!--&ndash;&gt;-->
            <!--<property name="basePackage" value="com.zcx"/>-->
            <!--<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>-->

        <!--</bean>-->
    <!--&lt;!&ndash;扫描带有@Mapper注解的接口&ndash;&gt;-->
    <!--<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">-->
        <!--<property name="basePackage" value="com.zcx"/>-->
        <!--<property name="annotationClass" value="com.zcx.base.dao.Mapper"/>-->
    <!--</bean>-->
    <!--&lt;!&ndash; 配置Mybatis的文件 ，mapperLocations配置**Mapper.xml文件位置，configLocation配置mybatis-config文件位置&ndash;&gt;-->
    <!--<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">-->
        <!--<property name="dataSource" ref="dataSource"/>-->
        <!--<property name="typeAliasesPackage" value="com.zcx"/>-->
        <!--<property name="configLocation" value="classpath:mybatis-config.xml"/>-->
        <!--<property name="mapperLocations" value="classpath:mapper/*.xml"/>  &lt;!&ndash;加载mapper文件&ndash;&gt;-->
    <!--</bean>-->

    <!--&lt;!&ndash; 自动扫描注解的bean &ndash;&gt;-->
        <!--<context:component-scan base-package="com.zcx" />-->

    <!--<context:component-scan base-package="com.zcx.schedule">-->
        <!--<context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller" />-->
    <!--</context:component-scan>-->
    <!--<task:scheduler id="scheduler" pool-size="10" />-->
    <!--<task:executor id="executor" keep-alive="3600" pool-size="100-200"-->
                   <!--queue-capacity="500" rejection-policy="CALLER_RUNS" />-->
    <!--<task:annotation-driven executor="executor" scheduler="scheduler" />-->
</beans>